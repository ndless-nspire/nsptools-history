Here are the constrains to follow to write a Thumb shellcode complying to the UTF-8 encoding.

ASCII:    0x20   ->   0x7F
       0010 0000    0111 1111
One of bit 5 and bit 6 must be set. Bit 5 must be set if bit 6 is cleared. Bit 7 must be cleared.

[A] These instructions are also valid in XML (control characters):
 0x09: 0000 1001   lsl     r1,r1,00 (useless)
 0x0A: 0000 1010   lsl     r2,r1,00 (mov r2, r1)
 0x0D: 0000 1101   lsl     r5,r1,00 (mov r5, r1)

These characters are not supported by Expat:  U+007F–U+0084, U+0086–U+009F

[B] To sum up the possible bytes are 9, A, D, 20-7F

These patterns are also are valid in UTF-8:
[C] 110xxxxx	10xxxxxx                       Multiple load/store, Conditional branch, Software Interrupt
[D] 11110xxx	10xxxxxx	10xxxxxx	10xxxxxx   Long branch with link with constrained offset (only the first half! ie write pc + the offset shifted left by 12 bits to LR) 
                                             then Load/store halfword, SP-relative load/store, Load address, Add offset to stack pointer, Push/pop register
                                             The long branch with link required, and the absence of branch with a positive offset to skip it
                                             make it not really useful.

[E] Constrains on instructions finishing with 2 registers (xRbRd):
    The bit before (x) is set -> no constraints
    The bit before (x) is cleared -> Rb between r4 and r7

===========
= Allowed =
===========

mov|cmp|adds|subs immediate
---------------------------

001x xxxx Offset8

mov|cmp|add|sub Rd, #Offset8     where Offset8 is one of [B]
mov with sub/add can be used to write other values.
mov Rd, #0 can be replaced by eor Rd, Rd.
cmp Rd, #0 can be replaced by adds Rd, #0x20 / subs Rd, #0x20

mov Rd, Rm
----------

Rm between r4 and r15, and Rd between r0 and r7

add 2 regs
----------

add Rd, Rm
01000100 H1H2RmRd. H1=0.

TODO constaints on registers.

push/pop registers
------------------

Follows a dummy Branch+Link, see [D]. Cannot really be used.
Example: 10110101 RList   (B5 xx) -> push {Rlist, LR}

conditional branch
------------------

1101 cond SOffset8   where SOffset is negative (10xxxxxx)
Must be followed by a dummy instruction from [D]

load/store with register offset
-------------------------------

0101 LB0Ro1 Ro2RbRd   where Ro is x0x (0, 1, 4, 5)
                            Rb and Rd follow [E]

load/store byte with immediate offset
-------------------------------------

ldrb Rd, Rb, #immed_5

0111BLOOO OORbRd    where the 2 lower bit of Offset are 00 or 01
Rb and Rd follow [E]:
 If Offset is odd, no constrains
 If Offset is even, Rb between r4 and r7

Hi register operations/branch exchange
--------------------------------------

Example: 01000111 01110000 (4770)  -> bx lr

ALU operations
--------------

0100 00Op OpRsRd    where Op is AND, EOR, ASR, ADC, TST, NEG, ORR or MUL
                          Rs and Rd follow [E]
mul: no constraints on Rs and Rd


=================
= *Not* allowed =
=================

add with small immediate
------------------------

add Rd, Rs, #immed_3

add PC / adr
------------

add Rd, PC, #immed_8 * 4

adr (add  rx,pc,offset)
-----------------------

add 3 regs
----------

add Rd, Rn, Rm


long branch with link
---------------------

[D] doesn't make it possible to output the second half.

Use mov r[0-7], pc and bx. But the return address is in r[0-7] and not lr.

blx
---

lsl/lsr rx, #imm
----------------

Use ASR if possible, or MOV+MUL, or multiple add Rd, Rm

unconditional branch
--------------------

Use bx